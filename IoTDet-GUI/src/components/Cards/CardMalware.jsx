import {Box, Card, CardActions, CardContent, CircularProgress, Container, Grid} from "@mui/material";
import Typography from "@mui/material/Typography";
import IconButton from "@mui/material/IconButton";
import CodeIcon from "@mui/icons-material/Code.js";
import InfoSharpIcon from "@mui/icons-material/InfoSharp.js";
import LinkIcon from "@mui/icons-material/Link.js";
import CloudDownloadIcon from "@mui/icons-material/CloudDownload.js";
import VerifiedSharpIcon from "@mui/icons-material/VerifiedSharp.js";
import HourglassEmptySharpIcon from "@mui/icons-material/HourglassEmptySharp.js";
import DialogURL from "../Dialog/DialogURL.jsx";
import {properties} from "../../properties.js";
import {useState} from "react";
import FullSizeDialog from "../Dialog/FullSizeDialog.jsx";
import {
    downloadMalware,
    downloadMonitoringScript,
    getCodeFromMalwareCleaner,
    getCodeFromMalwareExecutable
} from "../../services/FileRequests.js";
import DialogMalwareDisabled from "../Dialog/DialogMalwareDisabled.jsx";
import DoneSharpIcon from "@mui/icons-material/DoneSharp.js";
import CancelSharpIcon from "@mui/icons-material/CancelSharp.js";

const CardMalware = ({
                         malware,
                         can_validate,
                         handleValidate,
                         handleInvalidate
                     }) => {

    const [state, setState] = useState({
        openDialogURLExecutable: false,
        openDialogURLCleaner: false,
        codeExecutable: '',
        codeCleaner: '',
        openDialogCodeExecutable: false,
        openDialogCodeCleaner: false,
        loadingCode: false,
        openDialogInfo: false
    })


    const handleCodeExecutable = () => {
        setState({
            ...state,
            loadingCode: true,
            openDialogCodeExecutable: true
        })
        getCodeFromMalwareExecutable(malware.id)
            .then(response => {
                setState({
                    ...state,
                    loadingCode: false,
                    openDialogCodeExecutable: true,
                    codeExecutable: response.data
                })
            })
    }
    const handleCodeCleaner = () => {
        setState({
            ...state,
            loadingCode: true,
            openDialogCodeCleaner: true
        })

        getCodeFromMalwareCleaner(malware.id)
            .then(response => {
                setState({
                    ...state,
                    loadingCode: false,
                    openDialogCodeCleaner: true,
                    codeCleaner: response.data
                })
            })
    }


    const handleClickDownloadMalware = (type) => {

        if (type === 'executable')
            downloadMalware(malware.id, "executable")
                .then(response => {
                    const url = window.URL.createObjectURL(new Blob([response.data]));
                    const link = document.createElement('a');
                    link.href = url;
                    link.setAttribute('download', malware.malware_executable.filename);

                    document.body.appendChild(link);
                    link.click();
                })

        else if (type === 'cleaner')
            downloadMalware(malware.id, "cleaner")
                .then(response => {
                    const url = window.URL.createObjectURL(new Blob([response.data]));
                    const link = document.createElement('a');
                    link.href = url;
                    link.setAttribute('download', malware.malware_executable_cleaner.filename);

                    document.body.appendChild(link);
                    link.click();

                })
    }

    return (
        <>
            <Card
                sx={{
                    maxWidth: 350,
                    borderRadius: '28px',
                    backgroundColor: '#3B3B3B !important'
                }}
            >
                <CardContent sx={{padding: '16px 16px 0px 16px'}}>

                    <Typography sx={{color: 'white', fontWeight: 'bold'}} variant="h6"
                                component="div">
                        {malware.name}
                    </Typography>
                    <Typography variant="body2" sx={{color: 'wheat !important'}}>
                        Uploaded by: {malware.uploaded_by}
                    </Typography>

                </CardContent>
                <CardActions sx={{padding: '0px 8px 0px 8px'}} disableSpacing>
                    <IconButton
                        aria-label="add to favorites"
                        onClick={() => setState({...state, openDialogInfo: true})}>
                        <InfoSharpIcon sx={{color: 'white'}}/>
                    </IconButton>
                    {
                        !can_validate && malware.is_validated &&
                        <IconButton disabled
                                    sx={{color: '#828181', marginLeft: 'auto'}}
                                    aria-label="add to favorites">
                            <VerifiedSharpIcon/>
                        </IconButton>
                    }
                    {
                        !can_validate && !malware.is_validated &&
                        <IconButton disabled
                                    sx={{color: '#828181', marginLeft: 'auto'}}
                                    aria-label="add to favorites">
                            <HourglassEmptySharpIcon/>
                        </IconButton>
                    }
                    {
                        can_validate &&
                        <IconButton sx={{
                            marginLeft: 'auto',
                            color: 'white',
                            '&.Mui-disabled': {
                                color: 'rgba(0, 0, 0, 0.26) !important'
                            }
                        }} disabled={malware.is_validated} onClick={() => handleValidate(malware.id)}>
                            <DoneSharpIcon/>
                        </IconButton>
                    }
                    {
                        can_validate &&
                        <IconButton disabled={!malware.is_validated}
                                    aria-label="add to favorites" sx={{
                            color: 'white',
                            '&.Mui-disabled': {
                                color: 'rgba(0, 0, 0, 0.26) !important'
                            }
                        }}
                                    onClick={() => handleInvalidate(malware.id)}>
                            <CancelSharpIcon/>
                        </IconButton>
                    }
                </CardActions>

                <CardActions sx={{padding: '0px 16px 0px 16px'}} disableSpacing>
                    <Typography variant="body2" sx={{color: 'wheat'}}>
                        Executable:
                    </Typography>

                    <IconButton
                        onClick={handleCodeExecutable}
                        sx={{color: 'white'}}
                    >
                        <CodeIcon/>
                    </IconButton>

                    <IconButton

                        onClick={() => setState({...state, openDialogURLExecutable: true})}
                        sx={{
                            color: 'white',

                        }}
                    >
                        <LinkIcon/>
                    </IconButton>

                    <IconButton

                        onClick={() => handleClickDownloadMalware("executable")}
                        sx={{color: 'white'}}>
                        <CloudDownloadIcon/>
                    </IconButton>

                </CardActions>
                <CardActions sx={{padding: '0px 16px 8px 16px'}} disableSpacing>
                    <Typography variant="body2" sx={{color: 'wheat'}}>
                        Cleaner:
                    </Typography>

                    <IconButton
                        aria-label="add to favorites" onClick={handleCodeCleaner}
                    >
                        <CodeIcon sx={{color: 'white'}}/>
                    </IconButton>

                    <IconButton
                        aria-label="add to favorites"
                        onClick={() => setState({...state, openDialogURLCleaner: true})}
                        sx={{
                            color: 'white',
                            '&.Mui-disabled': {
                                color: 'rgba(0, 0, 0, 0.26) !important'
                            }
                        }}>
                        <LinkIcon/>
                    </IconButton>

                    <IconButton
                        aria-label="add to favorites"
                        onClick={() => handleClickDownloadMalware("cleaner")}
                        sx={{
                            color: 'white',
                            '&.Mui-disabled': {
                                color: 'rgba(0, 0, 0, 0.26) !important'
                            }
                        }}
                    >
                        <CloudDownloadIcon/>
                    </IconButton>

                </CardActions>


            </Card>
            <DialogURL title="Link to download executable script"
                       endpoint={`${properties.protocol}://${properties.url_server}:${properties.port}/file/malware/${malware.id}/executable/download/device`}
                       open={state.openDialogURLExecutable} handleClose={() => setState({
                ...state,
                openDialogURLExecutable: false
            })}/>
            <DialogURL title="Link to download the cleaner script"
                       endpoint={`${properties.protocol}://${properties.url_server}:${properties.port}/file/malware/${malware.id}/cleaner/download/device`}
                       open={state.openDialogURLCleaner} handleClose={() => setState({
                ...state,
                openDialogURLCleaner: false
            })}/>

            <FullSizeDialog open={state.openDialogCodeExecutable} title={`Code of ${malware.name} executable`}
                            handleClose={() => setState({
                                ...state,
                                openDialogCodeExecutable: false,
                                codeExecutable: ''
                            })}>
                <Container sx={{
                    marginLeft: `100px`,
                    marginTop: '30px',
                    marginRight: "100px",
                }}>

                    <Grid container>
                        {
                            state.loadingCode ?
                                <Box sx={{
                                    position: 'absolute',
                                    left: '50%',
                                    top: '50%',
                                }}>
                                    <CircularProgress sx={{color: 'white'}}/>
                                </Box>
                                :
                                <Grid item xs={12}>
                                            <textarea disabled spellCheck="false"
                                                      defaultValue={state.codeExecutable}
                                                      style={{

                                                          fontSize: '14px',
                                                          color: 'white',
                                                          outline: 'none',
                                                          resize: 'none',
                                                          backgroundColor: 'transparent',
                                                          border: 'none',
                                                          position: 'fixed',
                                                          top: '65px',
                                                          left: '5px',
                                                          right: 0,
                                                          bottom: 0,
                                                      }} rows={50}/>

                                </Grid>
                        }
                    </Grid>


                </Container>
            </FullSizeDialog>
            <FullSizeDialog open={state.openDialogCodeCleaner} title={`Code of ${malware.name} cleaner`}
                            handleClose={() => setState({
                                ...state,
                                openDialogCodeCleaner: false,
                                codeCleaner: ''
                            })}>
                <Container sx={{
                    marginLeft: `100px`,
                    marginTop: '30px',
                    marginRight: "100px",
                }}>

                    <Grid container>
                        {
                            state.loadingCode ?
                                <Box sx={{
                                    position: 'absolute',
                                    left: '50%',
                                    top: '50%',
                                }}>
                                    <CircularProgress sx={{color: 'white'}}/>
                                </Box>
                                :
                                <Grid item xs={12}>
                                            <textarea disabled spellCheck="false"
                                                      defaultValue={state.codeCleaner}
                                                      style={{

                                                          fontSize: '14px',
                                                          color: 'white',
                                                          outline: 'none',
                                                          resize: 'none',
                                                          backgroundColor: 'transparent',
                                                          border: 'none',
                                                          position: 'fixed',
                                                          top: '65px',
                                                          left: '5px',
                                                          right: 0,
                                                          bottom: 0,
                                                      }} rows={50}/>

                                </Grid>
                        }

                    </Grid>


                </Container>
            </FullSizeDialog>
            <DialogMalwareDisabled malware={malware} handleClose={() => setState({...state, openDialogInfo: false})}
                                   open={state.openDialogInfo}/>
        </>
    )
}

export default CardMalware